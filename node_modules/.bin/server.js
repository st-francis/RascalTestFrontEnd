const express = require('express');
const app = express();
const cors = require('cors');
const PORT = 3000;
const {exec} = require("child_process");
const fs = require('fs');

app.use(cors());

async function executeShellCommand()
{
   return new Promise((resolve, reject) => {
    exec("java -jar rascal-shell-stable.jar PoC/Main.rsc M:/RascalTestNew/rascaltest/src/main/rascal/PoC/FrontEnd/node_modules/.bin/choreography.choreo", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        reject(error);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        resolve(stderr);
        return;
    }
    
      console.log(`stdout: ${stdout}`);
      resolve(stdout);
    });
   });
}

async function openCounterExampleLTS()
{
   return new Promise((resolve, reject) => {
    exec("M:/Programs/mCRL2/bin/ltsgraph M:/RascalTestNew/rascaltest/src/main/counter-example.lts", (error, stdout, stderr) => {
    if (error) {
        reject(error);
        return;
    }
    if (stderr) {
        resolve(stderr);
        return;
    }    
      resolve(stdout);
    });
   });
}

async function openChoreographyLTS()
{
   return new Promise((resolve, reject) => {
    exec("M:/Programs/mCRL2/bin/ltsgraph M:/RascalTestNew/rascaltest/src/main/choreography.lts", (error, stdout, stderr) => {
    if (error) {
        reject(error);
        return;
    }
    if (stderr) {
        resolve(stderr);
        return;
    }
    
      resolve(stdout);
    });
   });
}

async function openProcessLTS()
{
   return new Promise((resolve, reject) => {
    exec("M:/Programs/mCRL2/bin/ltsgraph M:/RascalTestNew/rascaltest/src/main/processComposition.lts", (error, stdout, stderr) => {
    if (error) {
        reject(error);
        return;
    }
    if (stderr) {
        resolve(stderr);
        return;
    }
      resolve(stdout);
    });
   });
}

async function readFileAsync(filePath) {
    return new Promise((resolve, reject) => {
        fs.readFile(filePath, 'utf8', (err, data) => {
            if (err) {
                reject(err);
                return;
            }
            resolve(data);
        });
    });
}

app.get('/api/counter', async (req, res) => {

  try
  {
    const shellResult = await openCounterExampleLTS();
  } 
  catch (error) {
        console.error('Error:', error);
  }
});

app.get('/api/choreolts', async (req, res) => {

  try
  {
    const shellResult = await openChoreographyLTS();
  } 
  catch (error) {
        console.error('Error:', error);
  }
});

app.get('/api/proclts', async (req, res) => {

  try
  {
    const shellResult = await openProcessLTS();
    console.log('Shell command result:', shellResult);
  } 
  catch (error) {
        console.error('Error:', error);
  }
});

// Define a route to handle the GET request
app.get('/api/data', async (req, res) => {
  console.log("Started projection!");
  const filePath = 'M:/RascalTestNew/rascaltest/src/main/rascal/PoC/bin/results.txt';

  try
  {
    const shellResult = await executeShellCommand();
    console.log('Shell command result:', shellResult);

    const fileContent = await readFileAsync(filePath);
    console.log('File contents:', fileContent);
  
    const separatedRes = fileContent.split(',');

    const data = 
    {
      choreographyTransitions: separatedRes[0],
      choreographyStates: separatedRes[1],
      isDeadlockFree: separatedRes[2],
      processTransitions: separatedRes[3],
      processStates: separatedRes[4],
      areLTSsEquivalent: separatedRes[5]
    };

    // Send the data as JSON
    res.json(data);
  } 
  catch (error) {
        console.error('Error:', error);
  }
});

// Start the server
app.listen(3000, () => {
  console.log('Server is running on port 3000');
});